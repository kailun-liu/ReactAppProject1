{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/AvatarStyle.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","props","id","name","email","style","className","alt","src","Cardlist","robots","cardComponent","map","robot","i","AvatarStyle","onStyleChange","onClick","type","value","SearchBox","searchField","onSearchChange","onChange","types","placeholder","Scroll","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PEDNING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","CHANGE_STYLE","connect","searchRobots","requestRobots","isPending","styleChange","dispatch","event","text","target","console","log","payload","onRequestRobots","fetch","then","response","json","users","catch","err","useState","useEffect","filterZombies","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","initialStateStyle","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06763083.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nconst Card = (props) => {\r\n    const { id, name, email, style }= props;\r\n    return (\r\n    <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt = 'robots' src = {`https://robohash.org/${id}?set=${style}&size=200x200`}/>\r\n      <div>\r\n       <h5>{name}</h5>\r\n       <p>{email}</p>\r\n      </div>\r\n    </div> \r\n    ); \r\n}\r\nexport default Card;","import React, {Component} from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = (props) => {\r\n    const { robots, style } = props;\r\n    const cardComponent = robots.map((robot, i) => {\r\n      return (<Card \r\n        key = {i} \r\n        id = { robot.id } \r\n        name = { robot.name } \r\n        email = { robot.email }\r\n        style = {style}\r\n        />);\r\n    });\r\n    return (\r\n    <div>\r\n    {cardComponent}\r\n    </div> \r\n    ); \r\n}\r\nexport default Cardlist;","import React, {Component} from 'react';\r\n\r\n\r\nconst AvatarStyle = ({onStyleChange}) => {\r\n    return (\r\n      <div >\r\n        <button className='f6 link dim ph3 pv2 mb2 dib white bg-light-purple pa3 ma2' key='set1' onClick= {onStyleChange} type=\"button\" value='set1' >Robot</button>\r\n        <button className='f6 link dim ph3 pv2 mb2 dib white bg-light-purple pa3 ma2' key='set2' onClick= {onStyleChange} type=\"button\" value='set2' >Alien</button>\r\n        <button className='f6 link dim ph3 pv2 mb2 dib white bg-light-purple pa3 ma2' key='set3' onClick= {onStyleChange} type=\"button\" value='set3' >Avatar</button>\r\n        <button className='f6 link dim ph3 pv2 mb2 dib white bg-light-purple pa3 ma2' key='set4' onClick= {onStyleChange} type=\"button\" value='set4' >Cat</button>\r\n        <button className='f6 link dim ph3 pv2 mb2 dib white bg-light-purple pa3 ma2' key='set5' onClick= {onStyleChange} type=\"button\" value='set5' >Human</button>\r\n      </div>\r\n    ); \r\n}\r\nexport default AvatarStyle;","import React, {Component} from 'react';\r\n\r\nconst SearchBox = ({searchField, onSearchChange}) => {\r\n    return (\r\n      <div className = 'pa2'>\r\n        <input \r\n        onChange={onSearchChange} \r\n        className = 'pa3 ba b--green bg-lightest-blue' \r\n        types='search' \r\n        placeholder='search name'/>\r\n      </div>    \r\n    ); \r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return ( \r\n    \t<div style = {{overflowY:'scroll', border:'1px solid black', height:'800px'}}>\t\r\n    \t{props.children}\r\n    \t</div>\r\n    ); \r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError:false\r\n    }\r\n  }\r\n  componentDidCatch(error, info){\r\n\r\n    this.setState({ hasError:true });\r\n  }\r\n\r\n  render() {\r\n      if (this.state.hasError) {\r\n        return <h1>That's not good</h1>\r\n      }\r\n      else\r\n      {\r\n        return this.props.children\r\n      }\r\n    }\r\n  }\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PEDNING = 'REQUEST_ROBOTS_PEDNING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\nexport const CHANGE_STYLE = 'CHANGE_STYLE';\r\n","import React, { useState, useEffect} from 'react';\nimport Cardlist from '../components/Cardlist';\nimport AvatarStyle from '../components/AvatarStyle';\nimport SearchBox from '../components/SearchBox';\nimport { robots } from '../components/robots';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css'\nimport { setSearchField, setRequestRobots, setStyleChange } from '../actions' \nimport { connect } from 'react-redux';\n\n\nconst mapStateToProps = (state) => { //send object to the props\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n    style: state.styleChange.style\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => { //send object to the props\n  return {\n   onSearchChange: (event) => dispatch(setSearchField(event.target.value)), //dispatch an action to reducer\n   onRequestRobots: ()=> dispatch(setRequestRobots()), //setRequestRobots() would be caught by thunk-redux, and give it a dispatch\n   onStyleChange: (event)=>dispatch(setStyleChange(event.target.value))\n  }\n}\n\nfunction App (props) {\n\n  const [count, setCount] = useState(0);\n  useEffect(()=>{\n    props.onRequestRobots();\n  }, []) // if the second param is changed, useEffect will be called.\n\n  \n  const filterZombies = props.robots.filter((robot)=>robot.name.toLowerCase().includes(props.searchField.toLowerCase()));\n  if (!props.isPending)\n  {\n      return (\n      (<div className='tc'>\n        <p id = 'p'>Friends</p>\n        <AvatarStyle onStyleChange = {props.onStyleChange}/>\n        <SearchBox onSearchChange= {props.onSearchChange}/>\n        <Scroll>\n          <ErrorBoundary>\n            <Cardlist robots = { filterZombies } style = {props.style} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>)\n     )\n  }\n  else\n  {\n      return <h1>Loading</h1>\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App); //subcribe any state changes in the Redux Store\n//mapStateToProps, what state App should listen to\n//mapDispatchToProps, what action App should listen to\n","import { CHANGE_SEARCH_FIELD,\r\nREQUEST_ROBOTS_PEDNING,\r\nREQUEST_ROBOTS_SUCCESS,\r\nREQUEST_ROBOTS_FAILED,\r\nCHANGE_STYLE\r\n } from './constants';\r\n\r\n\r\nexport const setSearchField = (text) => {\r\n\tconsole.log('setSearchField');\r\n\treturn {\r\n\ttype: CHANGE_SEARCH_FIELD, //constant, in Javascript convention, is captalized. \r\n\tpayload: text  //payload is we're sending whatever data is needed to the reducer\r\n}}//redux would catch an Object, and send it to reducer\r\n\r\nexport const setRequestRobots = () => (dispatch)=>{\r\n\tconsole.log('setRequestRobots');\r\n\tdispatch({type: REQUEST_ROBOTS_PEDNING})\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json() )\r\n      .then(users=> dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: users}))\r\n      .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}))\r\n} // redux-thunk middleware would catch that function and give it dispatch\r\n// otherwise, redux couldn't catch it.\r\n\r\n\r\nexport const setStyleChange = (text) => {\r\n\treturn {\r\n\ttype: CHANGE_STYLE, //constant, in Javascript convention, is captalized. \r\n\tpayload: text  //payload is we're sending whatever data is needed to the reducer\r\n}}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCH_FIELD,\r\nREQUEST_ROBOTS_PEDNING,\r\nREQUEST_ROBOTS_SUCCESS,\r\nREQUEST_ROBOTS_FAILED,\r\nCHANGE_STYLE\r\n } from './constants';\r\n\r\nconst initialStateSearch = {  \r\n      searchField:'',\r\n} // Read-Only\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tconsole.log('searchRobots');\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField : action.payload} );  //{...state, {searchField : action.payload}} Object Destructuring\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\t\r\n}\r\n\r\nconst initialStateRobots = {  \r\n      isPending:false,\r\n      robots: [],\r\n      error:''\r\n} // Read-Only\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tconsole.log('requestRobots');\r\n\tswitch (action.type) {\r\n\t\tcase REQUEST_ROBOTS_PEDNING:\r\n\t\t\treturn Object.assign({}, state, {isPending : true} );  //{...state, {searchField : action.payload}} Object Destructuring\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots : action.payload, isPending : false} );\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error : action.payload, isPending : false} );\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\t\r\n}\r\n\r\nconst initialStateStyle = {  \r\n      style :'set1',\r\n} // Read-Only\r\n\r\n\r\nexport const styleChange = (state=initialStateStyle, action={}) => {\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_STYLE:\r\n\t\t\treturn Object.assign({}, state, {style : action.payload});  //{...state, {searchField : action.payload}} Object Destructuring\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\t\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots, styleChange } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport  thunkMiddleware  from 'redux-thunk';\n\n\nconst rootReducer = combineReducers({searchRobots, requestRobots, styleChange}) // combine all of reducers into rootReducer\nconst logger = createLogger(); //log each action for debugging //or redux devtool\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger)); //Create object tree of Redux State (redux libary)\n\n//pass store down all the component tree from the App, and use \"connect\" to finish these connection, to decide which container component would be aware of React State (reduc libary)        \nReactDOM.render(\n  <React.StrictMode>\n  \t<Provider store={store}>  \n  \t\t<App />\n  \t</Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}